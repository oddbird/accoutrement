// stylelint-disable prettier/prettier

@use '../../node_modules/sass-true/sass/true' as *;
@use '../../sass/color/themes';
@use '../../sass/color/tokens';
@use 'test-data' as data;
@use 'sass:math';

$_old: tokens.$colors;
tokens.$colors: data.$colors;

@include test-module('color/themes') {
  // Shades Of [function]
  // --------------------
  @include describe('Shades Of [function]') {
    $dint: math.percentage(math.div(1, 1.25));
    $lint: math.percentage(math.div(1, 3.25));

    @include it('Generates a range of shades based on the origin color') {
      @include assert-equal(
        themes.shades-of('simple', 2),
        (
          'simple-dark-2': '#simple' ('shade': (0.5 * $dint)),
          'simple-dark-1': '#simple',
          'simple-0': '#simple' ('tint': (0.5 * $lint)),
          'simple-light-1': '#simple' ('tint': (1.5 * $lint)),
          'simple-light-2': '#simple' ('tint': (2.5 * $lint))
        )
      );
    }

    @include it('Generates a range of shades based on a map') {
      $int1: math.percentage(math.div(1, 1.25));
      $int2: math.percentage(math.div(1, 2.25));
      $map: (
        'one': red,
        'two': yellow,
      );

      @include tokens.add-colors($map);
      @include assert-equal(
        themes.shades-of($map, 1),
        (
          'one-dark-1': ('#one' ('shade': (0.5 * $int1))),
          'one-0': '#one',
          'one-light-1': ('#one' ('tint': (0.5 * $int1))),
          'two-dark-1': ('#two' ('shade': (1.5 * $int2))),
          'two-0': ('#two' ('shade': (0.5 * $int2))),
          'two-light-1': '#two'
        )
      );
    }
  }

  // Stripe Colors [function]
  // ------------------------
  @include describe('Stripe Colors [function]') {
    @include it('Generates color-stops for a striped gradient') {
      @include assert-equal(
        themes.stripe-colors(red, orange, yellow, 'primary'),
        (
          red 0% 25%,
          orange 25% 50%,
          yellow 50% 75%,
          tokens.color('primary') 75% 100%
        )
      );
    }
  }

  // Stripe Colors [mixin]
  // ---------------------
  @include describe('Stripe Colors [mixin]') {
    @include it('Generates a striped gradient') {
      @include assert {
        @include output {
          @include themes.stripe-colors(to right, red, orange, yellow, 'primary');
        }

        @include expect {
          background-image: linear-gradient(
            to right,
            themes.stripe-colors(red, orange, yellow, 'primary')
          );
        }
      }
    }
  }
} // end module

tokens.$colors: $_old;
