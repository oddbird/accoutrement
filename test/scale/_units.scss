@use '../../node_modules/sass-true' as *;
@use '../../sass/scale/config';
@use '../../sass/scale/units';
@use '../../sass/scale/size';
@use './test-data' as data;

$_global: config.$sizes;
config.$sizes: data.$test-sizes;

// Unit Tests
// ==========
@include test-module('scale/units') {
  // Get Number
  // ----------
  @include describe('get-number [function]') {
    @include it('Absolute') {
      // stylelint-disable-next-line length-zero-no-unit
      @include assert-equal(units.get-number('px'), 0px);
    }

    @include it('Not Absolute') {
      @include assert-false(units.get-number('ch'));
    }

    @include it('Relative') {
      // stylelint-disable-next-line length-zero-no-unit
      @include assert-equal(units.get-number('ch', 'relative'), 0ch);
    }

    @include it('Not Known') {
      @include assert-false(units.get-number('wtf'));
    }
  }

  // Get PX
  // ----------
  @include describe('get-px [function]') {
    @include it('Returns false if units are incompatible') {
      @include assert-equal(units.get-px(2rem), false);
    }

    @include it('Returns px value') {
      @include assert-equal(units.get-px(100), 100px);
    }

    @include it('Adds length to 0px') {
      $length: 4;
      // stylelint-disable-next-line length-zero-no-unit
      @include assert-equal(units.get-px($length), $length + 0px);
    }
  }

  // Convert Units
  // -------------

  @include describe('convert-units [function]') {
    @include it('Converts px size to browser em size') {
      @include assert-equal(units.convert-units(24px, 'browser-ems'), 1.5em);
    }

    @include it('Converts rem size to browser em size') {
      @include assert-equal(units.convert-units(2rem, 'browser-ems'), 2.5em);
    }

    @include it('No conversion for equal units') {
      @include assert-equal(units.convert-units(6em, 'em'), 6em);
    }

    @include it('Convert px to em') {
      @include assert-equal(units.convert-units(30px, 'em'), 1.5em);
    }

    @include it('Convert px to %') {
      @include assert-equal(
        units.convert-units(16px, '%', $to-context: 1600px),
        1%
      );
    }

    @include it('Convert em to %') {
      @include assert-equal(
        units.convert-units(1.35em, '%', $to-context: 600px),
        4.5%
      );
    }

    @include it('Convert px to ex') {
      @include assert-equal(units.convert-units(30px, 'ex'), 3ex);
    }

    @include it('Convert % to px') {
      @include assert-equal(units.convert-units(150%, 'px', 18px), 27px);
    }

    @include it('Convert px to rem') {
      @include assert-equal(units.convert-units(1px, 'rem'), 0.05rem);
    }

    @include it('Convert em to mm') {
      @include assert-equal(units.convert-units(2em, 'mm', 18px), 9.525mm);
    }

    @include it('Convert rem to px') {
      @include assert-equal(units.convert-units(1rem, 'px'), 20px);
    }

    @include it('Convert to nothing') {
      @include assert-equal(units.convert-units(16vw, ''), 16);
    }

    @include it('Convert nothing to vw') {
      @include assert-equal(units.convert-units(16, 'vw'), 16vw);
    }

    @include it('Convert em to browser-em') {
      @include assert-equal(
        units.convert-units(2em, 'browser-ems', $from-context: 20px),
        2.5em
      );
    }

    @include it('Convert a named size based on named context') {
      @include assert-equal(
        units.convert-units('rhythm', 'browser-ems', 'root'),
        1.875em
      );
    }

    @include it('Errors on non-px/falsey context values') {
      @include assert-equal(
        units.convert-units('rhythm', 'em', 10%),
        'ERROR [convert-units] Context parameters must resolve to a value in pixel units'
      );
    }
  }
} // end module

config.$sizes: $_global;
