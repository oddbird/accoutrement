@use '../../sass/scale/units';
@use '../../node_modules/sass-true' as *;
@use '../../sass/scale/size';
@use '../../sass/scale/config';
@use '../../sass/tokens';
@use 'sass:math';
@use './test-data' as data;

$_global: config.$sizes;
config.$sizes: data.$test-sizes;

// Scale Tests
// ===========
@include test-module('scale/size') {
  // Size [function]
  // ---------------
  @include describe('size [function]') {
    @include it('Get size from map setting') {
      @include assert-equal(size.size('root'), 20px);
    }

    @include it('Get size from unit adjustment') {
      @include assert-equal(size.size('text'), 1rem);
    }

    @include it('Get size from linear adjustment') {
      @include assert-equal(size.size('h3'), 2rem);
    }

    @include it('Get size from ratio adjustment') {
      @include assert-equal(size.size('big'), 7.59375rem);
    }

    @include it('Get size from negative ratio') {
      @include assert-equal(size.size('small'), 0.5rem);
    }

    @include it('Get unit-adjusted size with string $do') {
      @include assert-equal(size.size(24px, 'rem'), 1.2rem);
    }

    @include it('Get unit-adjusted size with list $do') {
      @include assert-equal(size.size(24px, 'em' 10px), 2.4em);
    }

    @include it('Run adjustments on the fly with map $do') {
      @include assert-equal(
        size.size(
          24px,
          (
            'to': 'em' 10px,
            'times': 2,
          )
        ),
        4.8em
      );
    }

    @include it('Adjusted size with multiple arguments') {
      @include assert-equal(size.size('medium-page'), 75em);
    }

    @include it('Get rounded size') {
      @include assert-equal(size.size('round'), 3rem);
    }

    @include it('Dont adjust non-comparable units') {
      @include assert-equal(size.size(24vmin), 24vmin);
    }

    @include it('Allow viewport units without warning') {
      @include assert-equal(size.size('viewport'), 10vw);
    }

    @include it('Allow viewport units without warning') {
      @include assert-equal(size.size('percent'), 20%);
    }

    @include it('Allow simple calc values') {
      @include assert-equal(size.size('calc-simple'), calc(1em + 2vw));
    }

    @include it('Allow compiled calc values') {
      @include assert-equal(size.size('calc'), 'calc(20px + (2rem / 3))');
    }

    @include it('Allow calc references') {
      @include assert-equal(size.size('calc-ref'), 'calc(20px + (2rem / 3))');
    }

    @include it('Gets size from local source') {
      $local: (
        'new': 35em,
      );

      @include assert-equal(size.size('new', $source: $local), 35em);
    }
  }

  // Compile Sizes [function]
  // --------------
  @include describe('Compile Sizes [function]') {
    @include it('Compiles a local map with a global reference') {
      @include assert-equal(
        size.compile-sizes(
          (
            'new': '#root',
          )
        ),
        (
          'new': 20px,
        )
      );
    }

    @include it('Compiles a local map with a local reference') {
      @include assert-equal(
        size.compile-sizes(
          (
            'new': '#viewport',
          ),
          (
            'viewport': 15vw,
          )
        ),
        (
          'new': 15vw,
        )
      );
    }
  }

  // Negative [function]
  // -------------------
  @include describe('negative [function]') {
    @include it('Get negative size') {
      @include assert-equal(size.negative('rhythm'), 0 - size.size('rhythm'));
    }

    @include it('Get negative size with unit conversion') {
      @include assert-equal(size.negative('rhythm', 'px'), -30px);
    }

    @include it('Generates a negative calc size') {
      @include assert-equal(
        size.negative('calc-ref'),
        'calc(-1 * (20px + (2rem / 3)))'
      );
    }

    @include it('Gets negative from local source') {
      $local: (
        'new': 35em,
      );

      @include assert-equal(size.negative('new', $source: $local), -35em);
    }
  }

  // Square [mixin]
  // --------------
  @include describe('square [mixin]') {
    @include it('Set height and width') {
      @include assert('Output height/width based on keyword') {
        @include output {
          @include size.square('h1');
        }

        @include expect {
          height: 4rem;
          width: 4rem;
        }
      }
    }

    @include it('Gets square from local source') {
      $local: (
        'new': 35em,
      );

      @include assert {
        @include output {
          @include size.square('new', $source: $local);
        }

        @include expect {
          height: 35em;
          width: 35em;
        }
      }
    }
  }
} // end module
config.$sizes: $_global;
