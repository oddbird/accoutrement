@use '../../node_modules/sass-true/sass/true' as *;
@use '../../sass/tokens/config';
@use '../../sass/tokens/register';
@use '../../sass/tokens/api' as tokens;

@include test-module('tokens/api') {
  // Token Get
  // ---------
  @include describe('Token Get [function]') {
    $haystack: (
      'slow': 3s,
      'delay': 0.5s,
      'key': '#slow',
    );

    @include it('Can start with a simple map key') {
      @include assert-equal(tokens.get($haystack, 'delay'), 0.5s);
    }

    @include it('Handles recursion with accoutrement-get') {
      @include assert-equal(tokens.get($haystack, 'key'), 3s);
    }

    @include it('Handles on-the-fly adjustments with $do') {
      @include assert-equal(
        tokens.get(
          $haystack,
          'key',
          (
            'minus': '#delay',
          )
        ),
        2.5s
      );
    }

    @include it(
      'Memorize resolved value, and applies adjustments to memorized values'
    ) {
      @include assert-equal(
        tokens.get(
          $haystack,
          'key',
          (
            'minus': '#delay',
          )
        ),
        2.5s
      );
      @include assert-equal(
        tokens.get(
          $haystack,
          'key',
          (
            'minus': '#delay',
          )
        ),
        2.5s
      );
    }

    $map: (
      'this': 0,
      'this->that': 1,
      'foo': (
        'baz': 2,
        'three': (
          'abc': '#foo->baz',
          'def': '#this',
        ),
      ),
      'ofo': (
        'zab': 4,
      ),
      'fop': '#foo->baz',
      'fta': '#foo->three->abc',
      'ftb': '#foo->three->def',
      // These two tests illustrate the tolerance for `->` in keys/values
      // 1 [-> used in valid key]
      'bar': '#this->that',
      // this->that [not a hashtag]
      'bip': 'this->that',
      'dop': '#ofo->nope',
      'dip': '#that->baz',
    );

    @include it('Can start with a simple parent->child lookup') {
      @include assert-equal(tokens.get($map, 'foo->baz'), 2);
    }

    @include it('Handles parent->child hashes in values') {
      @include assert-equal(tokens.get($map, 'fop'), 2);
    }

    @include it('Handles multi-level hashes and references') {
      @include assert-equal(
        (tokens.get($map, 'fta'), tokens.get($map, 'ftb')),
        (2, 0)
      );
    }

    @include it('Tolerates `->` in keys and values') {
      @include assert-equal(
        (tokens.get($map, 'bar'), tokens.get($map, 'bip')),
        (1, 'this->that')
      );
    }

    @include it('Fails elegantly when keys are not found') {
      @include assert-equal(
        (tokens.get($map, 'dop'), tokens.get($map, 'dip')),
        (null, null)
      );
    }

    @include it('Can return submaps') {
      @include assert-equal(
        (tokens.get($map, 'ofo'), tokens.get($map, 'foo->three')),
        (('zab': 4), ('abc': 2, 'def': 0))
      );
    }

    @include it('Can return submaps when null mode is enabled') {
      @include assert-equal(
        (tokens.get($map, 'ofo'), tokens.get($map, 'foo->three')),
        (('zab': 4), ('abc': 2, 'def': 0))
      );
    }

    @include it('Returns null when keys are not found') {
      @include assert-equal(
        (tokens.get($map, 'dop'), tokens.get($map, 'dip')),
        (null, null)
      );
    }

    @include it(
      'Returns null when a single key from a string of keys is not found'
    ) {
      $map2: (
        'a': 'one',
        'b': 'two',
        'c': 'three',
      );

      @include assert-equal((tokens.get($map2, '#a #b#c #d')), (null));
    }

    @include it('Fails when keys are not found if error mode is enabled') {
      config.$handle-missing-keys: 'error';

      @include assert-equal(
        (
          tokens.get($map, 'dop', $ignore-cache: true),
          tokens.get($map, 'dip', $ignore-cache: true)
        ),
        (
          'ERROR [lookup-alias] Alias "ofo->nope" not found in map',
          'ERROR [lookup-alias] Alias "that->baz" not found in map'
        )
      );

      config.$handle-missing-keys: null;
    }

    @include it('Allows CSS values containing hashes') {
      $gradients: (
        'accent': linear-gradient(#f88812 10%, #9f29fa 80%),
      );

      @include assert {
        @include output {
          background-image: tokens.get($gradients, 'accent');
        }

        @include expect {
          background-image: linear-gradient(#f88812 10%, #9f29fa 80%);
        }
      }
    }
  }
}
