@use '../../node_modules/sass-true/sass/true' as *;
@use '../../sass/tokens/register';
@use '../../sass/tokens/compile';
@use '../../sass/color';
@use 'sass:color' as c;
@use 'sass:meta';

@include test-module('tokens/compile') {
  // Map Compile
  // -----------
  @include describe('map-compile [function]') {
    $test: (
      a: 'hello %s'
        (
          '%s': 'world',
        ),
      b: (
        'nested': '#a',
      ),
      c: 'not #b->nested',
    );
    $new: (
      external: 'totally #c',
      internal: '#external'
        (
          'str-replace': 'not' 'new',
        ),
      a: 'world',
    );

    @include it('Compiles each token in a map') {
      @include assert-equal(
        compile.map-compile($test),
        (
          a: 'hello world',
          b: (
            'nested': 'hello world',
          ),
          c: 'not hello world',
        )
      );
    }

    @include it('Compiles a map based on additional source') {
      @include assert-equal(
        compile.map-compile($new, $test),
        (
          external: 'totally not world',
          internal: 'totally new world',
          a: 'world',
        )
      );
    }

    @include it('Target map takes priority') {
      @include assert-equal(
        compile.map-compile(
          $new,
          (
            a: 'no',
            c: 'not peanuts',
          )
        ),
        (
          external: 'totally not peanuts',
          internal: 'totally new peanuts',
          a: 'world',
        )
      );
    }
  }

  @include describe('map-compile-with [function]') {
    color.$colors: (
      'brand-blue': hsl(195deg, 85%, 35%),
      'contrast-dark': maroon,
      'dark-blue': '#brand-blue'
        (
          'shade': 25%,
        ),
      'light-blue': '#brand-blue'
        (
          'tint': 25%,
        )
    );

    $colors-compiled: (
      'brand-blue': hsl(195deg, 85%, 35%),
      'contrast-dark': maroon,
      'dark-blue': rgb(42.040625, 95.3859375, 123.834375),
      'light-blue': rgb(73.790625, 159.1359375, 187.584375),
    );
    $fn: meta.get-function('color', $module: 'color');

    @include it('Compiles a map using the color function') {
      @include assert-equal(
        compile.map-compile-with(color.$colors, $fn),
        $colors-compiled
      );
    }

    @include it('Accepts additional arguments') {
      @include assert-equal(
        compile.map-compile-with(
          $colors-compiled,
          $fn,
          $do: (
            'color.adjust': (
              'hue': 180deg,
            )
          )
        ),
        (
          'brand-blue': hsl(15, 85%, 35%),
          'contrast-dark': teal,
          'dark-blue': rgb(123.834375, 70.4890625, 42.040625),
          'light-blue': rgb(187.584375, 102.2390625, 73.790625),
        )
      );
    }
  }
}
