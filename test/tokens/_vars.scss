@use '../../node_modules/sass-true/sass/true' as *;
@use '../../sass/tokens/register';
@use '../../sass/tokens/api' as token;
@use '../../sass/tokens/vars';

@include test-module('tokens/vars') {
  $test: (
    '_brand': hsl(120deg 50% 50%),
    'text': '#_brand'
      (
        'color.scale': (
          'lightness': -50%,
        ),
      ),
    'border': '#text',
    'private-alias': '#_brand',
    'multi': '#border',
  );

  // Tokens-- [mixin]
  // ----------------
  @include describe('Tokens-- [mixin]') {
    @include it('Converts a map into css custom properties') {
      @include assert {
        @include output {
          @include vars.tokens--($test);
        }

        @include expect {
          --text: #{token.get($test, 'text')};
          --border: var(--text, #{token.get($test, 'border')});
          --private-alias: #{token.get($test, '_brand')};
          --multi: var(--border, #{token.get($test, 'border')});
        }
      }
    }

    @include it('Optionally adds a prefix') {
      @include assert {
        @include output {
          @include vars.tokens--($test, 'test-');
        }

        @include expect {
          --test-text: #{token.get($test, 'text')};
          --test-border: var(--test-text, #{token.get($test, 'border')});
          --test-private-alias: #{token.get($test, '_brand')};
          --test-multi: var(--test-border, #{token.get($test, 'border')});
        }
      }
    }
  }

  // Token-- [mixin]
  // ---------------
  @include describe('Token-- [mixin]') {
    $token-test: (
      '_private': blue,
      'simple': red,
      'kevin': '#_private',
      'thread': '#kevin',
    );

    @include it('Generates a single variable from a token') {
      @include assert {
        @include output {
          @include vars.token--($token-test, 'simple');
        }

        @include expect {
          --simple: red;
        }
      }
    }

    @include it('Optionally adds a prefix') {
      @include assert {
        @include output {
          @include vars.token--($token-test, 'simple', $prefix: 'color_');
        }

        @include expect {
          --color_simple: red;
        }
      }
    }

    @include it('Generates a reference variable from a token') {
      @include assert {
        @include output {
          @include vars.token--($token-test, 'thread');
        }

        @include expect {
          --thread: var(--kevin, blue);
        }
      }
    }

    @include it('Optionally adds a fallback value') {
      @include assert {
        @include output {
          @include vars.token--($token-test, 'thread', $fallback: green);
        }

        @include expect {
          --thread: var(--kevin, green);
        }
      }
    }

    @include it('Generates a new variable alias') {
      @include assert {
        @include output {
          @include vars.token--($token-test, 'alias', 'thread');
        }

        @include expect {
          --alias: var(--thread, blue);
        }
      }
    }

    @include it('Gracefully handles values without valid fallback') {
      @include assert {
        @include output {
          @include vars.token--($token-test, 'alias', 'multi', true);
        }

        @include expect {
          --alias: var(--multi);
        }
      }
    }

    @include it('Establishes a CSS-Variable for any token') {
      @include assert {
        @include output {
          @include vars.token--($test, 'text');
        }

        @include expect {
          --text: #{token.get($test, 'text')};
        }
      }
    }

    @include it('Provides a reference for alias tokens') {
      @include assert {
        @include output {
          @include vars.token--($test, 'border');
        }

        @include expect {
          --border: var(--text, #{token.get($test, 'border')});
        }
      }
    }

    @include it('Establishes a CSS-Variable alias for any token') {
      @include assert {
        @include output {
          @include vars.token--($test, 'alias', 'text');
        }

        @include expect {
          --alias: var(--text, #{token.get($test, 'text')});
        }
      }
    }

    @include it('Accepts explicit fallback values') {
      @include assert {
        @include output {
          @include vars.token--($test, 'alias', 'text', red);
        }

        @include expect {
          --alias: var(--text, red);
        }
      }
    }

    @include it('Handles prefixing') {
      @include assert {
        @include output {
          @include vars.token--($test, 'alias', 'text', red, 'color-');
        }

        @include expect {
          --color-alias: var(--color-text, red);
        }
      }
    }
  }

  // As-Var [function]
  // -----------------
  @include describe('As-Var [function]') {
    @include it('Returns a variable with generated fallback') {
      @include assert-equal(
        vars.var-token($test, 'text'),
        var(--text, token.get($test, 'text'))
      );
    }

    @include it('Optionally uses no fallback') {
      @include assert-equal(vars.var-token($test, 'text', false), var(--text));
    }

    @include it('Optionally uses var fallback') {
      @include assert-equal(
        vars.var-token($test, 'text', 'border'),
        var(--text, var(--border, token.get($test, 'border')))
      );
    }

    @include it('Optionally uses custom fallback') {
      @include assert-equal(
        vars.var-token($test, 'text', red),
        var(--text, red)
      );
    }

    @include it('Optionally adds a prefix') {
      @include assert-equal(
        vars.var-token($test, 'text', 'border', 'color-'),
        var(--color-text, var(--color-border, token.get($test, 'border')))
      );
      @include assert-equal(
        vars.var-token($test, 'text', red, 'color-'),
        var(--color-text, red)
      );
    }

    @include it('Accepts private tokens') {
      @include assert-equal(
        vars.var-token($test, '_brand'),
        var(--_brand, hsl(120deg 50% 50%))
      );
    }
  }
}
