@use '../../node_modules/sass-true/sass/true' as *;
@use '../../sass/utils/string';
@use 'sass:list';

@include test-module('utils/string') {
  // Force [function]
  // ----------------
  @include describe('Force [function]') {
    @include it('Converts any value to a string') {
      @include assert-equal(string.force(2em), '2em');
      @include assert-equal(string.force([a 2 c]), '[a 2 c]');
    }

    @include it('Will not convert a map') {
      @include assert-equal(
        string.force(
          (
            hello: world,
          )
        ),
        'ERROR [string-force] Maps cannot be converted to strings'
      );
    }

    @include it('Will not convert a map inside a list') {
      @include assert-equal(
        string.force(one (hello: world) three),
        'one ERROR [string-force] Maps cannot be converted to strings three'
      );
    }
  }

  // String Replace
  // --------------
  @include describe('String Replace [function]') {
    @include it('Replaces a sub-string with another string') {
      @include assert-equal(
        string.replace('hello terrible world!', 'terrible', 'beautiful'),
        'hello beautiful world!'
      );
    }

    @include it('Replaces a full string, with any type') {
      @include assert-equal(string.replace('hello', 'hello', 300ms), 300ms);
    }

    @include it('Replaces a sub-string with nothing (false)') {
      @include assert-equal(
        string.replace('hello world', 'hello ', false),
        'world'
      );
    }

    @include it('Replaces a sub-string with nothing (null)') {
      @include assert-equal(
        string.replace('hello world', 'hello ', null),
        'world'
      );
    }

    @include it('Replaces all instances of a sub-string') {
      @include assert-equal(
        string.replace('hello world', 'o', '000', true),
        'hell000 w000rld'
      );
    }

    @include it('Replaces sub-strings in a list of strings') {
      @include assert-equal(
        string.replace('hello' 'world', 'o', '000', true),
        'hell000' 'w000rld'
      );
    }

    @include it('Forces $old and $new values to string type') {
      @include assert-equal(
        string.replace('hello 0.5s world!', 0.5s, 250ms),
        'hello 250ms world!'
      );
    }

    @include it('Errors when passed a map') {
      @include assert-equal(
        string.replace(
          (
            'goodbye': 'world',
          ),
          'one',
          'two'
        ),
        'ERROR [string-replace] `$string` parameter cannot be a map'
      );
    }
  }

  // Interpolate
  // -----------
  @include describe('interpolate [function]') {
    @include it('Replace any number of interpolation strings with values') {
      @include assert-equal(
        string.interpolate('hello %s%s', 'world', '!'),
        'hello world!'
      );
    }

    @include it('Errors with too many values') {
      @include assert-equal(
        string.interpolate('hello %s', 'world', '!'),
        'ERROR [interpolate] Too many interpolation values (2) given for `hello %s`'
      );
    }
  }

  // String Split [function]
  // -----------------------
  @include describe('String Split [function]') {
    @include it('Splits a string on a given separator') {
      @include assert-equal(string.split('hello@world', '@'), 'hello' 'world');
    }

    @include it('Splits a string on a complex separator') {
      @include assert-equal(
        string.split('hello->this->world', '->'),
        'hello' 'this' 'world'
      );
    }

    @include it('Limits the number of splits') {
      @include assert-equal(string.split('he@llo@wor@ld', '@', 2), 'he' 'llo');
      @include assert-equal(
        string.split('he@llo@wor@ld', '@', 1),
        list.join((), 'he')
      );
    }

    @include it('Can fall short of the limit') {
      @include assert-equal(
        string.split('he@llo@wor@ld', '@', 10),
        'he' 'llo' 'wor' 'ld'
      );
    }

    @include it('Returns empty string as single-item list') {
      @include assert-equal(string.split('', '@'), list.join((), ''));
    }

    @include it('Returns null-separator as single-item list') {
      @include assert-equal(
        string.split('hello world'),
        list.join((), 'hello world')
      );
    }

    @include it('Returns empty final string on ending-separator') {
      @include assert-equal(
        string.split('hello world ', ' '),
        'hello' 'world' ''
      );
    }

    @include it('Splits every letter on empty-string separator') {
      @include assert-equal(
        string.split('hello world', ''),
        'h' 'e' 'l' 'l' 'o' ' ' 'w' 'o' 'r' 'l' 'd'
      );
    }

    @include it('Limits the number of splits with empty-string separator') {
      @include assert-equal(string.split('hello world', '', 3), 'h' 'e' 'l');
    }

    @include it('Forces $string to a string') {
      @include assert-equal(string.split(34.5, '.'), '34' '5');
    }
  }

  // Trim [function]
  // ---------------
  @include describe('Trim [function]') {
    @include it('Strips whitespace from start and end of a string') {
      @include assert-equal(string.trim('  hello world     '), 'hello world');
    }

    @include it('Errors on invalid $string type') {
      @include assert-equal(
        string.trim(3.4),
        'ERROR [trim] Argument `$string` must be a string; got (number) `3.4`'
      );
    }
  }
}
