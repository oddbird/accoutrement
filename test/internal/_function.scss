@use '../../node_modules/sass-true/sass/true' as *;
@use '../../sass/internal/function';
@use 'sass:meta';

$fun: meta.get-function('set', $module: 'function');
$int: function.$internal;
function.$internal: ('internal': 'got-internal');

@include test-module('internal/function') {
  @include describe('set [function]') {
    @include it('Throws if $function is not a function') {
      @include assert-equal(
        function.set((), 'set', 'any', 'names'),
        'ERROR [function-register] Argument `$function` must be a function; got (string) `set`'
      );
    }

    @include it('Throws if no $names are provided') {
      @include assert-equal(
        function.set((), $fun),
        'ERROR [function-register] Provide at least one name for this function'
      );
    }

    @include it('Throws if a name is previously registered') {
      @include assert-equal(
        function.set(
          (
            'set': true,
          ),
          $fun,
          'set'
        ),
        'ERROR [function-register] A function has already been registered under the name `set`'
      );
    }

    @include it('Registers a function under any number of names') {
      @include assert-equal(
        function.set(
          (
            'existing': true,
          ),
          $fun,
          'set',
          'any',
          'names'
        ),
        (
          'existing': true,
          'set': $fun,
          'any': $fun,
          'names': $fun,
        )
      );
    }
  }

  @include describe('internal [mixin]') {
    @include it('Registers an internal function') {
      @include function.internal($fun, 'int-fun', 'int-fun2');
      @include assert-equal(
        function.$internal,
        (
          'internal': 'got-internal',
          'int-fun': $fun,
          'int-fun2': $fun,
        )
      );
    }
  }
}

function.$internal: $int;
