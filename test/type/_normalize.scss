// stylelint-disable scss/operator-no-unspaced

@use 'sass:list';
@use 'sass:map';
@use '../../../node_modules/sass-true/sass/true' as *;
@use 'test-data' as data;
@use '../../../sass/type/config';
@use '../../../sass/tokens/api';
@use '../../../sass/type/normalize';

$_global: config.$fonts;
config.$fonts: data.$fonts;

@include test-module('Type: Normalize') {
  // Normalize Font [function]
  // -------------------------
  @include describe('Normalize Font [function]') {
    $test: normalize.font(map.get(data.$fonts, 'TestFont'));

    @include it('Sets an explicit name, if missing') {
      @include assert-equal(map.get($test, 'name'), 'TestFont');
    }

    @include it('Generates a properly-formatted stack') {
      @include assert-equal(
        map.get($test, 'stack'),
        (TestFont, Georgia, serif)
      );
    }

    $test: normalize.font(map.get(data.$fonts, 'UniFont'));
    $expect: (
      'name': 'Unicode Test',
      'formats': 'woff2',
      'display': 'swap',
      'unicode-range': (
        U+0000-00FF,
        U+0131,
        'U+0152-0153',
        'U+02C6',
      ),
      'stack': list.join((), 'Unicode Test', 'comma'),
      ('normal', 'normal'):
        (
          'woff2': 'path/to/normal.woff2',
        ),
    );

    @include it('Builds a missing stack') {
      @include assert-equal(map.get($test, 'stack'), map.get($expect, 'stack'));
    }

    @include it('Normalizes variant data') {
      @include assert-equal($test, $expect);
    }

    @include it('Adds font name from implicit local source') {
      $local: (
        'new': (
          'stack': 'hello' 'world',
        ),
      );
      $font: api.get($local, 'new');
      $normal: normalize.font($font, 'new', $local);

      @include assert-equal(map.get($normal, 'name'), 'new');
    }

    @include it('Generates a font map from stack string/list') {
      @include assert-equal(
        normalize.font(map.get(data.$fonts, '_shared-stack')),
        (
          stack: (
            'Helvetica Neue',
            Helvetica,
            Arial,
            sans-serif,
          ),
        )
      );
    }
  }

  // Normalize Font Name
  // -------------------
  @include describe('Normalize Font Name [function]') {
    @include it('Get explicit font name directly') {
      @include assert-equal(
        normalize.font-name(api.get(data.$fonts, 'body-font')),
        'Source Sans Pro'
      );
    }

    @include it('Get implicit font name directly') {
      @include assert-equal(
        normalize.font-name(data.$fonts, 'TestFont'),
        'TestFont'
      );
    }

    @include it('Get explicit font name by alias') {
      @include assert-equal(
        normalize.font-name(api.get(data.$fonts, 'kevin bacon')),
        'Source Sans Pro'
      );
    }

    @include it('Get implicit font name by alias') {
      $key: 'tf-alias';

      @include assert-equal(
        normalize.font-name(api.get(data.$fonts, $key), $key),
        'TestFont'
      );
    }

    @include it('Get implicit font name by local source') {
      $local: (
        'new': (
          'stack': 'hello' 'world',
        ),
      );

      @include assert-equal(
        normalize.font-name(api.get($local, 'new'), 'new', $local),
        'new'
      );
    }
  }

  // Normalize Font Stack [function]
  // -------------------------------
  @include describe('Normalize Font Stack [function]') {
    @include it('Normalizes stack format') {
      $stack: normalize.font-stack(
        (
          'stack': 'Helvetica Neue' 'Arial',
        )
      );

      @include assert-equal($stack, ('Helvetica Neue', Arial), $inspect: true);
    }

    @include it('Prepends name if available') {
      $stack: normalize.font-stack(
        (
          'name': 'hello',
          'stack': 'Helvetica Neue' 'Arial',
        )
      );

      @include assert-equal(
        $stack,
        (hello, 'Helvetica Neue', Arial),
        $inspect: true
      );
    }

    @include it('Splits a string stack at commas') {
      @include assert-equal(
        normalize.font-stack(
          (
            'stack': 'Helvetica Neue, Helvetica,Arial',
          )
        ),
        ('Helvetica Neue', Helvetica, Arial)
      );
    }
  }

  // Normalize Variant Name
  // ----------------------
  @include describe('Normalize Variant Name [function]') {
    @include it('Single variant') {
      @include assert-equal(normalize.variant-name('bold'), ('bold', 'normal'));
    }

    @include it('Weight as string') {
      @include assert-equal(normalize.variant-name('200'), ('200', 'normal'));
    }

    @include it('Multiple variants') {
      @include assert-equal(
        normalize.variant-name(500 'italic'),
        (500, 'italic')
      );
    }

    @include it('Splits multi-variant strings') {
      @include assert-equal(
        normalize.variant-name('500 italic'),
        ('500', 'italic')
      );
    }
  }

  // Normalize Variant Data
  // ----------------------
  @include describe('Normalize Variant Data [function]') {
    @include it('Errors with path but no formats') {
      @include assert-equal(
        normalize.variant-data($data: 'my/path', $formats: ()),
        'ERROR [normalize-font] Font-path interpolation of `my/path` requires a list of formats'
      );
    }

    @include it('Interpolates a string and formats') {
      @include assert-equal(
        normalize.variant-data($data: 'my/path', $formats: 'woff' 'ttf'),
        (
          'woff': 'my/path.woff',
          'ttf': 'my/path.ttf',
        )
      );
    }

    @include it('Interpolates a map and formats') {
      @include assert-equal(
        normalize.variant-data(
          $data: (
            'path': 'my/path',
            'svgid': 'myID',
          ),
          $formats: 'woff' 'svg'
        ),
        (
          'woff': 'my/path.woff',
          'svg': 'my/path.svg#myID',
        )
      );
    }

    @include it('Explicit settings override path & svgid') {
      $test: normalize.variant-data(
        $data: (
          'path': 'my/path',
          'local': 'hello',
          'ttf': 'my/ttf/path',
          'svg': 'svg/path/to.svg#newID',
          'svgid': 'myID',
        ),
        $formats: 'woff' 'svg',
      );
      $expect: (
        'local': 'hello',
        'woff': 'my/path.woff',
        'ttf': 'my/ttf/path.ttf',
        'svg': 'svg/path/to.svg#newID',
      );

      @include assert-equal($test, $expect);
    }

    @include it('Leaves local list as-is') {
      @include assert-equal(
        normalize.variant-data(
          $data: (
            'local': 'this' 'another',
          )
        ),
        (
          'local': 'this' 'another',
        )
      );
    }
  }
} // end module

config.$fonts: $_global;
