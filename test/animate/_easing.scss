@use '../../node_modules/sass-true/sass/true' as *;
@use '../../sass/animate/easing';
@use 'test-data' as data;
@use 'sass:map';

$_old: easing.$easing;
easing.$easing: data.$easing;

// Easing Tests
// ============
@include test-module('animate/easing') {
  // Ease [function]
  // ---------------
  @include describe('Ease [function]') {
    @include it('Get easing from defaults') {
      @include assert-equal(
        easing.ease('_in-out-quad'),
        cubic-bezier(0.455, 0.03, 0.515, 0.955)
      );
    }

    @include it('Get easing from user') {
      @include assert-equal(
        easing.ease('elastic'),
        cubic-bezier(0.5, -0.4, 0.5, 1.4)
      );
    }

    @include it('Get easing from recursion') {
      @include assert-equal(
        easing.ease('sidebar-in'),
        cubic-bezier(0.455, 0.03, 0.515, 0.955)
      );
    }

    @include it('Applies on-the-fly adjustments') {
      @include assert-equal(
        easing.ease(
          'sidebar-in',
          (
            'str-replace': 0.03 0.25,
          )
        ),
        cubic-bezier(0.455, 0.25, 0.515, 0.955)
      );
    }

    @include it('Get easing from local map') {
      $local: (
        'name': 'ease-in-out',
      );

      @include assert-equal(easing.ease('name', $source: $local), ease-in-out);
    }
  }

  // Compile Easing [function]
  // -----------------
  @include describe('Compile Easing [function]') {
    @include it('Compiles the global map of easings by default') {
      @include assert-equal(
        easing.compile-easing(),
        (
          '_private': ease,
          'alias': ease,
          'thread': ease,
          'sidebar-in': cubic-bezier(0.455, 0.03, 0.515, 0.955),
          'elastic': cubic-bezier(0.5, -0.4, 0.5, 1.4),
        )
      );
    }

    @include it('References global easings') {
      @include assert-equal(
        easing.compile-easing(
          (
            a: '#thread',
          )
        ),
        (
          a: easing.ease('thread'),
        )
      );
    }

    @include it('Compiles a local map with a global reference') {
      @include assert-equal(
        easing.compile-easing(
          (
            'new': '#elastic',
          )
        ),
        (
          'new': cubic-bezier(0.5, -0.4, 0.5, 1.4),
        )
      );
    }

    @include it('Compiles a local map with a local reference') {
      @include assert-equal(
        easing.compile-easing(
          (
            'new': '#alias',
          ),
          (
            'alias': ease-in-out,
          )
        ),
        (
          'new': ease-in-out,
        )
      );
    }
  }

  // Add Ease [mixin]
  // ----------------
  @include describe('Add Ease [mixin]') {
    $outer: easing.$easing;
    $a: (
      'sidebar-in': '#_in-out-quad',
    );
    $b: (
      'elastic': '#_in-out-back',
    );

    @include easing.add-easing($a, $b);

    @include it('Merges times, and updates global variable') {
      @include assert-equal(
        easing.$easing,
        map.merge($outer, map.merge($a, $b))
      );
    }

    easing.$easing: $outer;
  }
} // end module

easing.$easing: $_old;
