// stylelint-disable prettier/prettier

@use '../../node_modules/sass-true/sass/true' as *;
@use '../../sass/animate/times';
@use '../../sass/animate/easing';
@use '../../sass/animate/change';
@use 'test-data' as data;
@use 'sass:map';

$_old-times: times.$times;
times.$times: data.$times;

$_old-easing: easing.$easing;
easing.$easing: data.$easing;

$changes: (
  'slide': transform times.time('fast'),
  'fade': opacity times.time('fade') easing.ease('_out-quad'),
  'slide-in': '#slide' easing.ease('_out-back'),
  'sidebar-in': (
    '#slide-in',
    '#fade' times.time('fade'),
  ),
  'modal-in': '#sidebar-in',
  'animation': slide-frames 1 times.time('fast') easing.ease('_out-back'),
  'animation-ref': '#animation' both,
);
$_old-changes: change.$changes;
change.$changes: $changes;

// Change Tests
// ============
@include test-module('animate/changes') {
  // Change [function]
  // -----------------
  @include describe('Change [function]') {
    @include it('Get change from map setting') {
      @include assert-equal(
        change.change('modal-in'),
        (
          (transform times.time('fast')) easing.ease('_out-back'),
          (opacity times.time('fade') easing.ease('_out-quad'))
            times.time('fade')
        )
      );
    }

    @include it('Applies on-the-fly adjustments') {
      @include assert-equal(
        change.change(
          'slide',
          (
            'str-replace': 'transform' '-ms-transform',
          )
        ),
        -ms-transform times.time('fast')
      );
    }

    @include it('Get change from local source') {
      $local: (
        'new': opacity 34ms,
      );

      @include assert-equal(
        change.change('new', $source: $local),
        opacity 34ms
      );
    }
  }

  // Compile Changes [function]
  // -----------------
  @include describe('Compile Changes [function]') {
    @include it('Compiles the global map of changes by default') {
      @include assert-equal(
        change.compile-changes(),
        (
          'slide': transform 150ms,
          'fade': opacity 500ms cubic-bezier(0.25, 0.46, 0.45, 0.94),
          'slide-in': (transform 150ms) cubic-bezier(0.175, 0.885, 0.32, 1.275),
          'sidebar-in': (
            (transform 150ms) cubic-bezier(0.175, 0.885, 0.32, 1.275),
            (opacity 500ms cubic-bezier(0.25, 0.46, 0.45, 0.94)) 500ms,
          ),
          'modal-in': (
            (transform 150ms) cubic-bezier(0.175, 0.885, 0.32, 1.275),
            (opacity 500ms cubic-bezier(0.25, 0.46, 0.45, 0.94)) 500ms,
          ),
          'animation': slide-frames 1 150ms cubic-bezier(0.175, 0.885, 0.32, 1.275),
          'animation-ref': (slide-frames 1 150ms cubic-bezier(0.175, 0.885, 0.32, 1.275)) both,
        )
      );
    }

    @include it('Compiles a local map with a global reference') {
      @include assert-equal(
        change.compile-changes(
          (
            'new': '#slide',
          )
        ),
        (
          'new': transform 150ms,
        )
      );
    }

    @include it('Compiles a local map with a local reference') {
      @include assert-equal(
        change.compile-changes(
          (
            'new': '#slide',
          ),
          (
            'slide': margin 300ms,
          )
        ),
        (
          'new': margin 300ms,
        )
      );
    }
  }

  // Add Changes [mixin]
  // -------------------
  @include describe('Add Changes [mixin]') {
    $outer: change.$changes;
    $a: (
      'glow': glow times.time('slow') easing.ease('_in') infinite alternate,
    );
    $b: (
      'slide-out': '#slide' easing.ease('_in'),
    );

    @include change.add-changes($a, $b);

    @include it('Merges changes, and updates global variable') {
      @include assert-equal(
        change.$changes,
        map.merge($outer, map.merge($a, $b))
      );
    }

    change.$changes: $outer;
  }

  // Animate [mixin]
  // ---------------
  @include describe('Animate [mixin]') {
    @include it('Outputs a named animation to CSS') {
      @include assert {
        @include output {
          @include change.animate('animation');
        }

        @include expect {
          animation: slide-frames 1 times.time('fast') easing.ease('_out-back');
        }
      }
    }

    @include it('Handles recursive animations') {
      @include assert {
        @include output {
          @include change.animate('animation-ref');
        }

        @include expect {
          animation: slide-frames 1 times.time('fast') easing.ease('_out-back')
            both;
        }
      }
    }

    @include it('Handles multiple animations') {
      @include assert {
        @include output {
          @include change.animate('animation', 'animation-ref');
        }

        @include expect {
          animation: slide-frames 1 times.time('fast') easing.ease('_out-back'),
            slide-frames 1 times.time('fast') easing.ease('_out-back') both;
        }
      }
    }
  }

  // Transition [mixin]
  // ------------------
  @include describe('Transition [mixin]') {
    @include it('Outputs a named transition to CSS') {
      @include assert {
        @include output {
          @include change.transition('slide');
        }

        @include expect {
          transition: transform times.time('fast');
        }
      }
    }

    @include it('Handles recursive transitions') {
      @include assert {
        @include output {
          @include change.transition('slide-in');
        }

        @include expect {
          transition: transform times.time('fast') easing.ease('_out-back');
        }
      }
    }

    @include it('Handles multiple transitions') {
      @include assert {
        @include output {
          @include change.transition('modal-in', 'fade');
        }

        @include expect {
          transition: transform times.time('fast') easing.ease('_out-back'),
            opacity times.time('fade') easing.ease('_out-quad')
              times.time('fade'),
            opacity times.time('fade') easing.ease('_out-quad');
        }
      }
    }
  }
} // end module

times.$times: $_old-times;
easing.$easing: $_old-easing;
change.$changes: $_old-changes;
