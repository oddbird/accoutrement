/// # Converting Units
/// @group scale-units


// Get PX [function]
// -----------------
/// If a value can be converted to px by Sass, do it.
///
/// @access private
///
/// @param {number} $length -
///   The number to be converted to px if comparable.
/// @return {number | false} -
///   Either the `px` value of the converted `$length` or `false`.
@use "sass:math";

@function _a_get-px(
  $length
) {
  // stylelint-disable-next-line length-zero-no-unit
  @return if(comparable($length, 1px), 0px + $length, false);
}


// Get Number [function]
// ---------------------
/// Get a `0`-value for any absolute unit.
///
/// @access private
///
/// @param {string} $unit -
///   The unit to return as a number.
/// @return {number | false} -
///   Either the `0` value of a unit or `false`.
@function _a_get-number(
  $unit,
  $relative: false
) {
  // stylelint-disable length-zero-no-unit
  $_absolute: (
    'in': 0in,
    'mm': 0mm,
    'cm': 0cm,
    'pt': 0pt,
    'pc': 0pc,
    'px': 0px,
  );

  $_relative: (
    'em': 0em,
    'rem': 0rem,
    '%': 0%,
    'ex': 0ex,
    'ch': 0ch,
    'vw': 0vw,
    'vh': 0vh,
    'vmin': 0vmin,
    'vmax': 0vmax,
    'fr': 0fr,
  );
  // stylelint-enable

  @if $relative {
    @return map-get($_absolute, $unit) or map-get($_relative, $unit);
  }

  @return map-get($_absolute, $unit);
}


// Convert Units [function]
// ------------------------
/// Convert lengths between comparable units.
/// You can also convert to `browser-ems`,
/// relative to the browser default rather than the site root â€“
/// useful for media queries.
/// Aliased as `convert-units`, `convert`, `units`, and `to`
/// in all Accoutrement maps.
///
/// @since 1.0.0 -
/// - NEW: Aliased as `to` in accoutrement-maps
///
/// @group scale-units
///
/// @param {length | string} $length -
///   The length or named size to be converted.
/// @param {string} $to-unit -
///   The desired units to convert to.
///   Some units (`ch`, `vw`, `vh`, `vmin`, `vmax`) cannot be converted.
/// @param {length | string} $from-context [false] -
///   When converting from relative units,
///   the absolute length (in px) to which $length refers -
///   e.g. for `$lengths` in em units, would normally be the
///   font-size of the current element.
///   `false` and `null` will resolve to your 'root' setting or 16px
/// @param {length | string} $to-context [$from-context] -
///   For converting *to* relative units,
///   the absolute length in px to which the output value will refer.
///   Defaults to the same as `$from-context`, since it is rarely needed.
/// @throws Context paremeters must resolve to a value in pixel units
@function convert-units(
  $length,
  $to-unit,
  $from-context: false,
  $to-context: $from-context
) {
  $_convertable: (
    'in', 'mm', 'cm',
    'pt', 'pc',
    'px',
    'em', 'rem', 'browser-ems',
    '%', 'ex',
  );
  $length: size($length);
  $from-unit: unit($length);

  // No conversion needed
  @if ($from-unit == $to-unit) {
    @return $length;
  }

  // No units
  @if ($from-unit == '') {
    @return _a_get-number($to-unit, 'allow-relative') + $length;
  } @else if ($to-unit == '') {
    @return math.div($length, $length * 0 + 1);
  }

  // Easily comparable units
  $to-zero: _a_get-number($to-unit);

  @if $to-zero and comparable($length, $to-zero)  {
    @return $to-zero + $length;
  }

  // Warn and escape when units are not convertable
  @each $units in ($from-unit, $to-unit) {
    @if not index($_convertable, $units) {
      $warning: '`#{$units}` units can not be reliably converted,';
      $warning: '#{$warning} returning original value';
      @warn $warning;
      @return $length;
    }
  }

  // Establish root size
  $root-size: map-get($sizes, 'root') or $_BROWSER-DEFAULT-FONT-SIZE;
  $root-size: size($root-size);
  $root-size: _a_get-px($root-size);

  // Establish relative context
  $from-context: size($from-context);
  $to-context: size($to-context);
  $from-context: if($from-context, _a_get-px($from-context), $root-size);
  $to-context: if($to-context, _a_get-px($to-context), $root-size);

  // Context values must be in px
  @if (not $from-context) or (not $to-context) {
    @return _a_error(
      'Context paremeters must resolve to a value in pixel units',
      'convert-units'
    );
  }

  // Special conversion for browser-default ems (needed in media-queries)
  @if ($to-unit == 'browser-ems') {
    $size: convert-units($length, 'px', $from-context);
    @return math.div($size, $_BROWSER-DEFAULT-FONT-SIZE) * 1em;
  }

  // Convert relative length to pixels
  $px-length: _a_get-px($length) or $length;
  $from-unit: unit($px-length);

  // Convert relative units using the from-context parameter.
  @if $from-unit == 'em' {
    $px-length: math.div($length * $from-context, 1em);
  } @else if $from-unit == 'rem' {
    $px-length: math.div($length * $root-size, 1rem);
  } @else if $from-unit == '%' {
    $px-length: math.div($length * $from-context, 100%);
  } @else if $from-unit == 'ex'  {
    $px-length: math.div($length * $from-context, 2ex);
  }

  // Convert length in pixels to the output unit
  @if $to-zero {
    @return $to-zero + $px-length;
  } @else if $to-unit == 'em' {
    @return math.div($px-length * 1em, $to-context);
  } @else if $to-unit == 'rem' {
    @return math.div($px-length * 1rem, $root-size);
  } @else if $to-unit == '%' {
    @return math.div($px-length * 100%, $to-context);
  } @else if $to-unit == 'ex' {
    @return math.div($px-length * 2ex, $to-context);
  }

  $warn: 'Failed to convert `#{$length}` into `#{$to-units}` units';
  @warn '#{$warn} returning original value';
  @return $length;
}
@include _a_register-function('convert-units', 'convert', 'units', 'to');
