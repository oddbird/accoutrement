// Ratios
// ------


// Fluid Ratio [mixin]
// -------------------
/// Establish a fluid-height container based on an aspect ratio.
///
/// @since 1.0.0 -
/// - NEW: Accepts `$source` map argument,
///   for custom source-palette
/// @since 0.1.0 -
/// - BREAKING: Uses the new [shared](core.html) map syntax,
///   and [ratio](core-ratio.html) settings
///
/// @group layout-ratios
/// @example scss
///   .media {
///     @include fluid-ratio('_widescreen');
///   }
///
/// @param {float | string} $ratio ['_widescreen'] -
///   The ratio of width over height, or a ratio keyword.
/// @param {length} $width [100%] -
///   The established fluid width of the element.
/// @param {relative | absolute | fixed | null} $position [relative] -
///   Establish a positioning context, so children can be stretched to fit.
/// @param {map} $source [$ratios] -
///   Optional accoutrement-format map of ratios to use as the origin palette
///   (in addition to the provided defaults)
@use "sass:math";

@mixin fluid-ratio(
  $ratio: '_widescreen',
  $width: 100%,
  $position: relative,
  $source: $ratios
) {
  height: 0;
  padding-top: fluid-ratio($ratio, $width, $source);
  position: $position;
  width: $width;
}


// Fluid Ratio [function]
// ----------------------
/// Return a padding-height
/// based on a given ratio and fluid width.
///
/// @since 1.0.0 -
/// - NEW: Accepts `$source` map argument,
///   for custom source-palette
/// @since 0.1.0 -
/// - BREAKING: Uses the new [shared](core.html) map syntax,
///   and [ratio](core-ratio.html) settings
///
/// @group layout-ratios
/// @example scss
///   .media {
///     width: 100%;
///     padding-top: fluid-ratio('_widescreen');
///   }
///
/// @param {float | string} $ratio ['_widescreen'] -
///   The ratio of width over height, or a ratio keyword.
/// @param {length} $width [100%] -
///   The established fluid width of the element.
/// @param {map} $source [$ratios] -
///   Optional accoutrement-format map of ratios to use as the origin palette
///   (in addition to the provided defaults)
/// @return {percentage} -
///   A fluid height, based on the width and ratio.
@function fluid-ratio(
  $ratio: '_widescreen',
  $width: 100%,
  $source: $ratios
) {
  $ratio: ratio($ratio, $source: $source);

  @return math.div(1, $ratio) * $width;
}
