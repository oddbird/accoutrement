/// # List Functions
/// Functions for basic Sass-list manipulation.
/// While these functions are defined with private prefixes,
/// they are registered without the prefix for map-access.
/// @group core-lists


// Remove Nth
// ----------
/// Remove any item (1-indexed) from a list.
///
/// This function is prefixed outside maps
/// & should not be used directly,
/// but is available in all accoutrement maps
/// under the `'remove-nth'` alias.
///
/// @access public
/// @name remove-nth
/// @group core-lists
/// @example scss
///   $map: (
///     'main-start': ['nav-end' 'main-start' 'footer-start'],
///     'small-start': '#main-start' ('remove-nth': 1),
///   );
///   /*! #{inspect(get-token($map, 'small-start'))} */
///
/// @param {list} $list -
///   The original list to be edited
/// @param {number} $index -
///   The 1-indexed item to remove from the list
/// @return {list} -
///   The original list, with item removed
/// @throws `$index` must be a non-zero integer
/// @throws `$index` is too large for the list length
@use "sass:math";

@function _a_remove-nth(
  $list,
  $index
) {
  $result: _a_list-template($list);
  $type: type-of($index);

  @if ($type != 'number') or ($index == 0) or (round($index) != $index) {
    $got: 'got (#{$type}) `#{if(($type == 'null'), 'null', $index)}`';
    @return _a_error(
      '$index must be a non-zero integer, #{$got}',
      'remove-nth'
    );
  } @else if (abs($index) > length($list)) {
    @return _a_error(
      '$index is `#{$index}` but list is only #{length($list)} item long',
      'remove-nth'
    );
  }

  $index: if(($index < 0), length($list) + $index + 1, $index);

  @for $i from 1 through length($list) {
    @if ($i != $index) {
      $result: append($result, nth($list, $i));
    }
  }

  @return $result;
}
@include _a_register-function('_a_remove-nth', 'remove-nth');


// List From Template
// ------------------
/// Return a new (empty) list using the same delimiter
/// and bracket settings as the template list.
///
/// @access private
///
/// @param {list} $template [()] -
///   The original list to be matched
/// @return {list} -
///   An empty list that matches the template
@function _a_list-template(
  $template: ()
) {
  $new: ();

  // return the same type of list we were given…
  @if function-exists('is-bracketed') {
    $new: join($new, $new, list-separator($template), is-bracketed($template));
  } @else {
    $new: join($new, $new, list-separator($template));
  }

  @return $new;
}
@include _a_register-function('_a_list-template', 'list-template');


// String Length Sort
// ------------------
/// Sort a list (long-to-short)
/// by the (stringified) length of each item.
///
/// @access private
///
/// @param {list} $list -
///   Items to sort
/// @return {*} -
///   Sorted list, long to short
@function _a_str-length-sort(
  $list
) {
  // return the same type of list we started with…
  $less: _a_list-template($list);
  $equal: $less;
  $large: $less;

  @if length($list) > 1 {
    $seed: nth($list, ceil(math.div(length($list), 2)));
    $seed-length: str-length('#{$seed}');

    @each $item in $list {
      $item-length: str-length('#{$item}');

      @if ($item-length == $seed-length) {
        $equal: append($equal, $item);
      } @else if ($item-length < $seed-length) {
        $less: append($less, $item);
      } @else if ($item-length > $seed-length) {
        $large: append($large, $item);
      }
    }

    $less: _a_str-length-sort($less);
    $large: _a_str-length-sort($large);

    @return join($large, join($equal, $less));
  }

  @return $list;
}
